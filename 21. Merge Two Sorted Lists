/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        ListNode* head;

        // boundary condition : empty
        if(list1==NULL){
            return list2;
        }
        if(list2==NULL){
            return list1;
        }
        //now we have 2 non empty list
        //decide head
        if(list1->val >= list2->val){
            head=list2;
            list2=list2->next;
            //cout<<"Hshift list2 to"<<list2->val<<endl;
        }
        else{
            head=list1;
            list1=list1->next;
            //cout<<"Hshift list1 to "<<list1->val<<endl;            
        }
        ListNode* now=head;
        while(list1!=NULL &&list2!=NULL){
            if(list1->val >= list2->val){

                now->next=list2;               
                list2=list2->next;
                now=now->next;
                //cout<<"shift list1 to "<<now->val<<endl;       
                //cout<<"shift list1 now "<<list1->val<<endl;
                //cout<<"shift list2 now "<<list2->val<<endl<<endl;                
                  
            }
            else{
                now->next=list1;
                list1=list1->next;
                now=now->next;
                //cout<<"shift list1 to "<<now->val<<endl;       
                //cout<<"shift list1 now "<<list1->val<<endl;
                //cout<<"shift list2 now "<<list2->val<<endl<<endl;
            }            
        }
     
        //got one empty list ,deal another one
        if(list1==NULL){
            now->next=list2;
        }
        if(list2==NULL){
            now->next=list1;
        } 
        
        return head;
    }
};
