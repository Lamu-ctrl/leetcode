/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
public:
    int output=0;
    
    int averageOfSubtree(TreeNode* root) {
        traversal(root,{0,0});
        return output;
    }
    
    vector<int> traversal(TreeNode* curr,vector<int> vec){
        vector<int> tmpl={0,0};
        vector<int> tmpr={0,0};
        
        
        if(curr->left!=NULL){
            tmpl=traversal(curr->left,vec);
        }
        if(curr->right!=NULL){
            tmpr=traversal(curr->right,vec);
        }
           
        vec[1]=tmpl[1]+tmpr[1];
        
        if(vec[1] !=0 || (curr->left== NULL && curr->right == NULL ) ){
            vec[0]+=curr->val+tmpl[0]+tmpr[0];
            vec[1]++;          
            if(curr->val == (vec[0]/vec[1])){
                output++;
            }
        }
        return vec;
    }

};
